@page "/"
@implements IDisposable


<button class="btn btn-primary" @onclick="ToggleEnabledButtonClicked">Toggle Enabled</button>

<button class="btn btn-primary" @onclick="UpdateMessageButtonClicked">Update Message</button>
<br />
<br />
<h3>@State.AppState.Message</h3>
<br />
<br />
<ChildComponent />


@code {

    [CascadingParameter]
    public CascadingAppStateProvider State { get; set; }

    void ToggleEnabledButtonClicked()
    {
        State.AppState.UpdateEnabled(this, !State.AppState.Enabled);
    }

    void UpdateMessageButtonClicked()
    {
        string msg = "Boom! At " + DateTime.Now.ToLongTimeString();
        State.AppState.UpdateMessage(this, msg);
    }

    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override void OnInitialized()
    {
        State.AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    void IDisposable.Dispose()
    {
        State.AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}